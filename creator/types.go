// Generated by [optioner] command-line tool; DO NOT EDIT
// If you have any questions, please create issues and submit contributions at:
// https://github.com/chenmingyong0423/go-optioner

// Copyright 2024 chenmingyong0423

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package creator

import (
	"context"
	"reflect"
	"time"

	"github.com/chenmingyong0423/go-mongox/v2/field"

	"go.mongodb.org/mongo-driver/v2/mongo"
)

//go:generate optioner -type OpContext -output types.go -mode append
type (
	OpContext[T any] struct {
		Col    *mongo.Collection `opt:"-"`
		Fields []*field.Filed

		Doc          *T
		Docs         []*T
		MongoOptions any
		ModelHook    any
		ReflectValue reflect.Value
		StartTime    time.Time

		Result any
	}
	HookFn[T any] func(ctx context.Context, opContext *OpContext[T], opts ...any) error
)

type OpContextOption[T any] func(*OpContext[T])

func NewOpContext[T any](col *mongo.Collection, opts ...OpContextOption[T]) *OpContext[T] {
	opContext := &OpContext[T]{
		Col: col,
	}

	for _, opt := range opts {
		opt(opContext)
	}

	return opContext
}

func WithFields[T any](fields []*field.Filed) OpContextOption[T] {
	return func(opContext *OpContext[T]) {
		opContext.Fields = fields
	}
}

func WithDoc[T any](doc *T) OpContextOption[T] {
	return func(opContext *OpContext[T]) {
		opContext.Doc = doc
	}
}

func WithDocs[T any](docs []*T) OpContextOption[T] {
	return func(opContext *OpContext[T]) {
		opContext.Docs = docs
	}
}

func WithMongoOptions[T any](mongoOptions any) OpContextOption[T] {
	return func(opContext *OpContext[T]) {
		opContext.MongoOptions = mongoOptions
	}
}

func WithModelHook[T any](modelHook any) OpContextOption[T] {
	return func(opContext *OpContext[T]) {
		opContext.ModelHook = modelHook
	}
}

func WithReflectValue[T any](reflectValue reflect.Value) OpContextOption[T] {
	return func(opContext *OpContext[T]) {
		opContext.ReflectValue = reflectValue
	}
}

func WithStartTime[T any](startTime time.Time) OpContextOption[T] {
	return func(opContext *OpContext[T]) {
		opContext.StartTime = startTime
	}
}

func WithResult[T any](result any) OpContextOption[T] {
	return func(opContext *OpContext[T]) {
		opContext.Result = result
	}
}
