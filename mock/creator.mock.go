// Code generated by MockGen. DO NOT EDIT.
// Source: creator.go
//
// Generated by this command:
//
//	mockgen -source=creator.go -destination=../mock/creator.mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mongo "go.mongodb.org/mongo-driver/v2/mongo"
	options "go.mongodb.org/mongo-driver/v2/mongo/options"
	gomock "go.uber.org/mock/gomock"
)

// MockICreator is a mock of ICreator interface.
type MockICreator[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockICreatorMockRecorder[T]
}

// MockICreatorMockRecorder is the mock recorder for MockICreator.
type MockICreatorMockRecorder[T any] struct {
	mock *MockICreator[T]
}

// NewMockICreator creates a new mock instance.
func NewMockICreator[T any](ctrl *gomock.Controller) *MockICreator[T] {
	mock := &MockICreator[T]{ctrl: ctrl}
	mock.recorder = &MockICreatorMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICreator[T]) EXPECT() *MockICreatorMockRecorder[T] {
	return m.recorder
}

// InsertMany mocks base method.
func (m *MockICreator[T]) InsertMany(ctx context.Context, docs []*T, opts ...options.Lister[options.InsertManyOptions]) (*mongo.InsertManyResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, docs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertMany", varargs...)
	ret0, _ := ret[0].(*mongo.InsertManyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockICreatorMockRecorder[T]) InsertMany(ctx, docs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, docs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockICreator[T])(nil).InsertMany), varargs...)
}

// InsertOne mocks base method.
func (m *MockICreator[T]) InsertOne(ctx context.Context, docs *T, opts ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, docs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockICreatorMockRecorder[T]) InsertOne(ctx, docs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, docs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockICreator[T])(nil).InsertOne), varargs...)
}
