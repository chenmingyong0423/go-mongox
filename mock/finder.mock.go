// Code generated by MockGen. DO NOT EDIT.
// Source: finder.go
//
// Generated by this command:
//
//	mockgen -source=finder.go -destination=../mock/finder.mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	options "go.mongodb.org/mongo-driver/v2/mongo/options"
	gomock "go.uber.org/mock/gomock"
)

// MockIFinder is a mock of IFinder interface.
type MockIFinder[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockIFinderMockRecorder[T]
}

// MockIFinderMockRecorder is the mock recorder for MockIFinder.
type MockIFinderMockRecorder[T any] struct {
	mock *MockIFinder[T]
}

// NewMockIFinder creates a new mock instance.
func NewMockIFinder[T any](ctrl *gomock.Controller) *MockIFinder[T] {
	mock := &MockIFinder[T]{ctrl: ctrl}
	mock.recorder = &MockIFinderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFinder[T]) EXPECT() *MockIFinderMockRecorder[T] {
	return m.recorder
}

// Count mocks base method.
func (m *MockIFinder[T]) Count(ctx context.Context, opts ...options.Lister[options.CountOptions]) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockIFinderMockRecorder[T]) Count(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIFinder[T])(nil).Count), varargs...)
}

// Find mocks base method.
func (m *MockIFinder[T]) Find(ctx context.Context, opts ...options.Lister[options.FindOptions]) ([]*T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIFinderMockRecorder[T]) Find(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIFinder[T])(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockIFinder[T]) FindOne(ctx context.Context, opts ...options.Lister[options.FindOneOptions]) (*T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockIFinderMockRecorder[T]) FindOne(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockIFinder[T])(nil).FindOne), varargs...)
}
