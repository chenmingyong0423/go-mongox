// Code generated by MockGen. DO NOT EDIT.
// Source: deleter.go
//
// Generated by this command:
//
//	mockgen -source=deleter.go -destination=../mock/deleter.mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mongo "go.mongodb.org/mongo-driver/v2/mongo"
	options "go.mongodb.org/mongo-driver/v2/mongo/options"
	gomock "go.uber.org/mock/gomock"
)

// MockIDeleter is a mock of IDeleter interface.
type MockIDeleter[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockIDeleterMockRecorder[T]
}

// MockIDeleterMockRecorder is the mock recorder for MockIDeleter.
type MockIDeleterMockRecorder[T any] struct {
	mock *MockIDeleter[T]
}

// NewMockIDeleter creates a new mock instance.
func NewMockIDeleter[T any](ctrl *gomock.Controller) *MockIDeleter[T] {
	mock := &MockIDeleter[T]{ctrl: ctrl}
	mock.recorder = &MockIDeleterMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeleter[T]) EXPECT() *MockIDeleterMockRecorder[T] {
	return m.recorder
}

// DeleteMany mocks base method.
func (m *MockIDeleter[T]) DeleteMany(ctx context.Context, opts ...options.Lister[options.DeleteManyOptions]) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMany", varargs...)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockIDeleterMockRecorder[T]) DeleteMany(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockIDeleter[T])(nil).DeleteMany), varargs...)
}

// DeleteOne mocks base method.
func (m *MockIDeleter[T]) DeleteOne(ctx context.Context, opts ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOne", varargs...)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockIDeleterMockRecorder[T]) DeleteOne(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockIDeleter[T])(nil).DeleteOne), varargs...)
}
